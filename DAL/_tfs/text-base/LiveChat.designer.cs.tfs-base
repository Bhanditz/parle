#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LiveChat.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="TestDB")]
	public partial class LiveChatDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertOperator(Operator instance);
    partial void UpdateOperator(Operator instance);
    partial void DeleteOperator(Operator instance);
    partial void InsertDepartmentOperator(DepartmentOperator instance);
    partial void UpdateDepartmentOperator(DepartmentOperator instance);
    partial void DeleteDepartmentOperator(DepartmentOperator instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertChatInvitation(ChatInvitation instance);
    partial void UpdateChatInvitation(ChatInvitation instance);
    partial void DeleteChatInvitation(ChatInvitation instance);
    partial void InsertChatRequest(ChatRequest instance);
    partial void UpdateChatRequest(ChatRequest instance);
    partial void DeleteChatRequest(ChatRequest instance);
    partial void InsertChannel(Channel instance);
    partial void UpdateChannel(Channel instance);
    partial void DeleteChannel(Channel instance);
    partial void InsertChatMessage(ChatMessage instance);
    partial void UpdateChatMessage(ChatMessage instance);
    partial void DeleteChatMessage(ChatMessage instance);
    partial void InsertVisitorHistory(VisitorHistory instance);
    partial void UpdateVisitorHistory(VisitorHistory instance);
    partial void DeleteVisitorHistory(VisitorHistory instance);
    #endregion
		
		public LiveChatDataContext() : 
				base(global::LiveChat.DAL.Properties.Settings.Default.DBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LiveChatDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LiveChatDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LiveChatDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LiveChatDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Operator> Operators
		{
			get
			{
				return this.GetTable<Operator>();
			}
		}
		
		public System.Data.Linq.Table<DepartmentOperator> DepartmentOperators
		{
			get
			{
				return this.GetTable<DepartmentOperator>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<ChatInvitation> ChatInvitations
		{
			get
			{
				return this.GetTable<ChatInvitation>();
			}
		}
		
		public System.Data.Linq.Table<ChatRequest> ChatRequests
		{
			get
			{
				return this.GetTable<ChatRequest>();
			}
		}
		
		public System.Data.Linq.Table<Channel> Channels
		{
			get
			{
				return this.GetTable<Channel>();
			}
		}
		
		public System.Data.Linq.Table<ChatMessage> ChatMessages
		{
			get
			{
				return this.GetTable<ChatMessage>();
			}
		}
		
		public System.Data.Linq.Table<VisitorHistory> VisitorHistories
		{
			get
			{
				return this.GetTable<VisitorHistory>();
			}
		}
	}
	
	[Table(Name="dbo.LiveChat_Operators")]
	public partial class Operator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OperatorId;
		
		private string _Name;
		
		private string _Password;
		
		private string _Email;
		
		private bool _IsOnline;
		
		private bool _IsAdmin;
		
		private EntitySet<DepartmentOperator> _LiveChat_DepartmentOperators;
		
		private EntitySet<ChatInvitation> _LiveChat_ChatInvitations;
		
		private EntitySet<Channel> _LiveChat_Channels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOperatorIdChanging(int value);
    partial void OnOperatorIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIsOnlineChanging(bool value);
    partial void OnIsOnlineChanged();
    partial void OnIsAdminChanging(bool value);
    partial void OnIsAdminChanged();
    #endregion
		
		public Operator()
		{
			this._LiveChat_DepartmentOperators = new EntitySet<DepartmentOperator>(new Action<DepartmentOperator>(this.attach_LiveChat_DepartmentOperators), new Action<DepartmentOperator>(this.detach_LiveChat_DepartmentOperators));
			this._LiveChat_ChatInvitations = new EntitySet<ChatInvitation>(new Action<ChatInvitation>(this.attach_LiveChat_ChatInvitations), new Action<ChatInvitation>(this.detach_LiveChat_ChatInvitations));
			this._LiveChat_Channels = new EntitySet<Channel>(new Action<Channel>(this.attach_LiveChat_Channels), new Action<Channel>(this.detach_LiveChat_Channels));
			OnCreated();
		}
		
		[Column(Storage="_OperatorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OperatorId
		{
			get
			{
				return this._OperatorId;
			}
			set
			{
				if ((this._OperatorId != value))
				{
					this.OnOperatorIdChanging(value);
					this.SendPropertyChanging();
					this._OperatorId = value;
					this.SendPropertyChanged("OperatorId");
					this.OnOperatorIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_IsOnline", DbType="Bit NOT NULL")]
		public bool IsOnline
		{
			get
			{
				return this._IsOnline;
			}
			set
			{
				if ((this._IsOnline != value))
				{
					this.OnIsOnlineChanging(value);
					this.SendPropertyChanging();
					this._IsOnline = value;
					this.SendPropertyChanged("IsOnline");
					this.OnIsOnlineChanged();
				}
			}
		}
		
		[Column(Storage="_IsAdmin", DbType="Bit NOT NULL")]
		public bool IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[Association(Name="Operator_DepartmentOperator", Storage="_LiveChat_DepartmentOperators", OtherKey="OperatorId")]
		public EntitySet<DepartmentOperator> LiveChat_DepartmentOperators
		{
			get
			{
				return this._LiveChat_DepartmentOperators;
			}
			set
			{
				this._LiveChat_DepartmentOperators.Assign(value);
			}
		}
		
		[Association(Name="Operator_ChatInvitation", Storage="_LiveChat_ChatInvitations", OtherKey="OperatorId")]
		public EntitySet<ChatInvitation> LiveChat_ChatInvitations
		{
			get
			{
				return this._LiveChat_ChatInvitations;
			}
			set
			{
				this._LiveChat_ChatInvitations.Assign(value);
			}
		}
		
		[Association(Name="Operator_Channel", Storage="_LiveChat_Channels", OtherKey="OperatorId")]
		public EntitySet<Channel> LiveChat_Channels
		{
			get
			{
				return this._LiveChat_Channels;
			}
			set
			{
				this._LiveChat_Channels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LiveChat_DepartmentOperators(DepartmentOperator entity)
		{
			this.SendPropertyChanging();
			entity.Operator = this;
		}
		
		private void detach_LiveChat_DepartmentOperators(DepartmentOperator entity)
		{
			this.SendPropertyChanging();
			entity.Operator = null;
		}
		
		private void attach_LiveChat_ChatInvitations(ChatInvitation entity)
		{
			this.SendPropertyChanging();
			entity.Operator = this;
		}
		
		private void detach_LiveChat_ChatInvitations(ChatInvitation entity)
		{
			this.SendPropertyChanging();
			entity.Operator = null;
		}
		
		private void attach_LiveChat_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Operator = this;
		}
		
		private void detach_LiveChat_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Operator = null;
		}
	}
	
	[Table(Name="dbo.LiveChat_DepartmentOperators")]
	public partial class DepartmentOperator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentId;
		
		private int _OperatorId;
		
		private EntityRef<Operator> _Operator;
		
		private EntityRef<Department> _LiveChat_Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnOperatorIdChanging(int value);
    partial void OnOperatorIdChanged();
    #endregion
		
		public DepartmentOperator()
		{
			this._Operator = default(EntityRef<Operator>);
			this._LiveChat_Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[Column(Storage="_DepartmentId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._LiveChat_Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[Column(Storage="_OperatorId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OperatorId
		{
			get
			{
				return this._OperatorId;
			}
			set
			{
				if ((this._OperatorId != value))
				{
					if (this._Operator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperatorIdChanging(value);
					this.SendPropertyChanging();
					this._OperatorId = value;
					this.SendPropertyChanged("OperatorId");
					this.OnOperatorIdChanged();
				}
			}
		}
		
		[Association(Name="Operator_DepartmentOperator", Storage="_Operator", ThisKey="OperatorId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Operator Operator
		{
			get
			{
				return this._Operator.Entity;
			}
			set
			{
				Operator previousValue = this._Operator.Entity;
				if (((previousValue != value) 
							|| (this._Operator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Operator.Entity = null;
						previousValue.LiveChat_DepartmentOperators.Remove(this);
					}
					this._Operator.Entity = value;
					if ((value != null))
					{
						value.LiveChat_DepartmentOperators.Add(this);
						this._OperatorId = value.OperatorId;
					}
					else
					{
						this._OperatorId = default(int);
					}
					this.SendPropertyChanged("Operator");
				}
			}
		}
		
		[Association(Name="Department_DepartmentOperator", Storage="_LiveChat_Department", ThisKey="DepartmentId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Department LiveChat_Department
		{
			get
			{
				return this._LiveChat_Department.Entity;
			}
			set
			{
				Department previousValue = this._LiveChat_Department.Entity;
				if (((previousValue != value) 
							|| (this._LiveChat_Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LiveChat_Department.Entity = null;
						previousValue.DepartmentOperators.Remove(this);
					}
					this._LiveChat_Department.Entity = value;
					if ((value != null))
					{
						value.DepartmentOperators.Add(this);
						this._DepartmentId = value.DepartmentId;
					}
					else
					{
						this._DepartmentId = default(int);
					}
					this.SendPropertyChanged("LiveChat_Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LiveChat_Departments")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentId;
		
		private string _DepartmentName;
		
		private bool _IsActive;
		
		private EntitySet<DepartmentOperator> _DepartmentOperators;
		
		private EntitySet<ChatRequest> _LiveChat_ChatRequests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Department()
		{
			this._DepartmentOperators = new EntitySet<DepartmentOperator>(new Action<DepartmentOperator>(this.attach_DepartmentOperators), new Action<DepartmentOperator>(this.detach_DepartmentOperators));
			this._LiveChat_ChatRequests = new EntitySet<ChatRequest>(new Action<ChatRequest>(this.attach_LiveChat_ChatRequests), new Action<ChatRequest>(this.detach_LiveChat_ChatRequests));
			OnCreated();
		}
		
		[Column(Storage="_DepartmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DepartmentName
		{
			get
			{
				return this._DepartmentName;
			}
			set
			{
				if ((this._DepartmentName != value))
				{
					this.OnDepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentName = value;
					this.SendPropertyChanged("DepartmentName");
					this.OnDepartmentNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Association(Name="Department_DepartmentOperator", Storage="_DepartmentOperators", OtherKey="DepartmentId")]
		public EntitySet<DepartmentOperator> DepartmentOperators
		{
			get
			{
				return this._DepartmentOperators;
			}
			set
			{
				this._DepartmentOperators.Assign(value);
			}
		}
		
		[Association(Name="Department_ChatRequest", Storage="_LiveChat_ChatRequests", OtherKey="DepartmentId")]
		public EntitySet<ChatRequest> LiveChat_ChatRequests
		{
			get
			{
				return this._LiveChat_ChatRequests;
			}
			set
			{
				this._LiveChat_ChatRequests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DepartmentOperators(DepartmentOperator entity)
		{
			this.SendPropertyChanging();
			entity.LiveChat_Department = this;
		}
		
		private void detach_DepartmentOperators(DepartmentOperator entity)
		{
			this.SendPropertyChanging();
			entity.LiveChat_Department = null;
		}
		
		private void attach_LiveChat_ChatRequests(ChatRequest entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_LiveChat_ChatRequests(ChatRequest entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[Table(Name="dbo.LiveChat_ChatInvitations")]
	public partial class ChatInvitation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InvitationId;
		
		private int _OperatorId;
		
		private string _VisitorIp;
		
		private string _Message;
		
		private bool _WasAccept;
		
		private System.DateTime _RequestDate;
		
		private EntityRef<Operator> _Operator;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvitationIdChanging(int value);
    partial void OnInvitationIdChanged();
    partial void OnOperatorIdChanging(int value);
    partial void OnOperatorIdChanged();
    partial void OnVisitorIpChanging(string value);
    partial void OnVisitorIpChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnWasAcceptChanging(bool value);
    partial void OnWasAcceptChanged();
    partial void OnRequestDateChanging(System.DateTime value);
    partial void OnRequestDateChanged();
    #endregion
		
		public ChatInvitation()
		{
			this._Operator = default(EntityRef<Operator>);
			OnCreated();
		}
		
		[Column(Storage="_InvitationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InvitationId
		{
			get
			{
				return this._InvitationId;
			}
			set
			{
				if ((this._InvitationId != value))
				{
					this.OnInvitationIdChanging(value);
					this.SendPropertyChanging();
					this._InvitationId = value;
					this.SendPropertyChanged("InvitationId");
					this.OnInvitationIdChanged();
				}
			}
		}
		
		[Column(Storage="_OperatorId", DbType="Int NOT NULL")]
		public int OperatorId
		{
			get
			{
				return this._OperatorId;
			}
			set
			{
				if ((this._OperatorId != value))
				{
					if (this._Operator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperatorIdChanging(value);
					this.SendPropertyChanging();
					this._OperatorId = value;
					this.SendPropertyChanged("OperatorId");
					this.OnOperatorIdChanged();
				}
			}
		}
		
		[Column(Storage="_VisitorIp", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string VisitorIp
		{
			get
			{
				return this._VisitorIp;
			}
			set
			{
				if ((this._VisitorIp != value))
				{
					this.OnVisitorIpChanging(value);
					this.SendPropertyChanging();
					this._VisitorIp = value;
					this.SendPropertyChanged("VisitorIp");
					this.OnVisitorIpChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="NVarChar(350) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Storage="_WasAccept", DbType="Bit NOT NULL")]
		public bool WasAccept
		{
			get
			{
				return this._WasAccept;
			}
			set
			{
				if ((this._WasAccept != value))
				{
					this.OnWasAcceptChanging(value);
					this.SendPropertyChanging();
					this._WasAccept = value;
					this.SendPropertyChanged("WasAccept");
					this.OnWasAcceptChanged();
				}
			}
		}
		
		[Column(Storage="_RequestDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[Association(Name="Operator_ChatInvitation", Storage="_Operator", ThisKey="OperatorId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Operator Operator
		{
			get
			{
				return this._Operator.Entity;
			}
			set
			{
				Operator previousValue = this._Operator.Entity;
				if (((previousValue != value) 
							|| (this._Operator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Operator.Entity = null;
						previousValue.LiveChat_ChatInvitations.Remove(this);
					}
					this._Operator.Entity = value;
					if ((value != null))
					{
						value.LiveChat_ChatInvitations.Add(this);
						this._OperatorId = value.OperatorId;
					}
					else
					{
						this._OperatorId = default(int);
					}
					this.SendPropertyChanged("Operator");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LiveChat_ChatRequests")]
	public partial class ChatRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequestId;
		
		private string _VisitorIp;
		
		private string _VisitorName;
		
		private string _VisitorEmail;
		
		private int _DepartmentId;
		
		private bool _SendCopyOfChat;
		
		private System.DateTime _RequestedDate;
		
		private EntitySet<Channel> _LiveChat_Channels;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIdChanging(int value);
    partial void OnRequestIdChanged();
    partial void OnVisitorIpChanging(string value);
    partial void OnVisitorIpChanged();
    partial void OnVisitorNameChanging(string value);
    partial void OnVisitorNameChanged();
    partial void OnVisitorEmailChanging(string value);
    partial void OnVisitorEmailChanged();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnSendCopyOfChatChanging(bool value);
    partial void OnSendCopyOfChatChanged();
    partial void OnRequestedDateChanging(System.DateTime value);
    partial void OnRequestedDateChanged();
    #endregion
		
		public ChatRequest()
		{
			this._LiveChat_Channels = new EntitySet<Channel>(new Action<Channel>(this.attach_LiveChat_Channels), new Action<Channel>(this.detach_LiveChat_Channels));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[Column(Storage="_RequestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestId
		{
			get
			{
				return this._RequestId;
			}
			set
			{
				if ((this._RequestId != value))
				{
					this.OnRequestIdChanging(value);
					this.SendPropertyChanging();
					this._RequestId = value;
					this.SendPropertyChanged("RequestId");
					this.OnRequestIdChanged();
				}
			}
		}
		
		[Column(Storage="_VisitorIp", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string VisitorIp
		{
			get
			{
				return this._VisitorIp;
			}
			set
			{
				if ((this._VisitorIp != value))
				{
					this.OnVisitorIpChanging(value);
					this.SendPropertyChanging();
					this._VisitorIp = value;
					this.SendPropertyChanged("VisitorIp");
					this.OnVisitorIpChanged();
				}
			}
		}
		
		[Column(Storage="_VisitorName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string VisitorName
		{
			get
			{
				return this._VisitorName;
			}
			set
			{
				if ((this._VisitorName != value))
				{
					this.OnVisitorNameChanging(value);
					this.SendPropertyChanging();
					this._VisitorName = value;
					this.SendPropertyChanged("VisitorName");
					this.OnVisitorNameChanged();
				}
			}
		}
		
		[Column(Storage="_VisitorEmail", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string VisitorEmail
		{
			get
			{
				return this._VisitorEmail;
			}
			set
			{
				if ((this._VisitorEmail != value))
				{
					this.OnVisitorEmailChanging(value);
					this.SendPropertyChanging();
					this._VisitorEmail = value;
					this.SendPropertyChanged("VisitorEmail");
					this.OnVisitorEmailChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentId", DbType="Int NOT NULL")]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[Column(Storage="_SendCopyOfChat", DbType="Bit NOT NULL")]
		public bool SendCopyOfChat
		{
			get
			{
				return this._SendCopyOfChat;
			}
			set
			{
				if ((this._SendCopyOfChat != value))
				{
					this.OnSendCopyOfChatChanging(value);
					this.SendPropertyChanging();
					this._SendCopyOfChat = value;
					this.SendPropertyChanged("SendCopyOfChat");
					this.OnSendCopyOfChatChanged();
				}
			}
		}
		
		[Column(Storage="_RequestedDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime RequestedDate
		{
			get
			{
				return this._RequestedDate;
			}
			set
			{
				if ((this._RequestedDate != value))
				{
					this.OnRequestedDateChanging(value);
					this.SendPropertyChanging();
					this._RequestedDate = value;
					this.SendPropertyChanged("RequestedDate");
					this.OnRequestedDateChanged();
				}
			}
		}
		
		[Association(Name="ChatRequest_Channel", Storage="_LiveChat_Channels", OtherKey="RequestId")]
		public EntitySet<Channel> LiveChat_Channels
		{
			get
			{
				return this._LiveChat_Channels;
			}
			set
			{
				this._LiveChat_Channels.Assign(value);
			}
		}
		
		[Association(Name="Department_ChatRequest", Storage="_Department", ThisKey="DepartmentId", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.LiveChat_ChatRequests.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.LiveChat_ChatRequests.Add(this);
						this._DepartmentId = value.DepartmentId;
					}
					else
					{
						this._DepartmentId = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LiveChat_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.ChatRequest = this;
		}
		
		private void detach_LiveChat_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.ChatRequest = null;
		}
	}
	
	[Table(Name="dbo.LiveChat_Channels")]
	public partial class Channel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ChannelId;
		
		private int _RequestId;
		
		private int _OperatorId;
		
		private System.DateTime _OpenDate;
		
		private System.Nullable<System.DateTime> _AcceptDate;
		
		private System.Nullable<System.DateTime> _CloseDate;
		
		private EntitySet<ChatMessage> _LiveChat_Messages;
		
		private EntityRef<ChatRequest> _ChatRequest;
		
		private EntityRef<Operator> _Operator;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChannelIdChanging(System.Guid value);
    partial void OnChannelIdChanged();
    partial void OnRequestIdChanging(int value);
    partial void OnRequestIdChanged();
    partial void OnOperatorIdChanging(int value);
    partial void OnOperatorIdChanged();
    partial void OnOpenDateChanging(System.DateTime value);
    partial void OnOpenDateChanged();
    partial void OnAcceptDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAcceptDateChanged();
    partial void OnCloseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCloseDateChanged();
    #endregion
		
		public Channel()
		{
			this._LiveChat_Messages = new EntitySet<ChatMessage>(new Action<ChatMessage>(this.attach_LiveChat_Messages), new Action<ChatMessage>(this.detach_LiveChat_Messages));
			this._ChatRequest = default(EntityRef<ChatRequest>);
			this._Operator = default(EntityRef<Operator>);
			OnCreated();
		}
		
		[Column(Storage="_ChannelId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ChannelId
		{
			get
			{
				return this._ChannelId;
			}
			set
			{
				if ((this._ChannelId != value))
				{
					this.OnChannelIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelId = value;
					this.SendPropertyChanged("ChannelId");
					this.OnChannelIdChanged();
				}
			}
		}
		
		[Column(Storage="_RequestId", DbType="Int NOT NULL")]
		public int RequestId
		{
			get
			{
				return this._RequestId;
			}
			set
			{
				if ((this._RequestId != value))
				{
					if (this._ChatRequest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestIdChanging(value);
					this.SendPropertyChanging();
					this._RequestId = value;
					this.SendPropertyChanged("RequestId");
					this.OnRequestIdChanged();
				}
			}
		}
		
		[Column(Storage="_OperatorId", DbType="Int NOT NULL")]
		public int OperatorId
		{
			get
			{
				return this._OperatorId;
			}
			set
			{
				if ((this._OperatorId != value))
				{
					if (this._Operator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperatorIdChanging(value);
					this.SendPropertyChanging();
					this._OperatorId = value;
					this.SendPropertyChanged("OperatorId");
					this.OnOperatorIdChanged();
				}
			}
		}
		
		[Column(Storage="_OpenDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime OpenDate
		{
			get
			{
				return this._OpenDate;
			}
			set
			{
				if ((this._OpenDate != value))
				{
					this.OnOpenDateChanging(value);
					this.SendPropertyChanging();
					this._OpenDate = value;
					this.SendPropertyChanged("OpenDate");
					this.OnOpenDateChanged();
				}
			}
		}
		
		[Column(Storage="_AcceptDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> AcceptDate
		{
			get
			{
				return this._AcceptDate;
			}
			set
			{
				if ((this._AcceptDate != value))
				{
					this.OnAcceptDateChanging(value);
					this.SendPropertyChanging();
					this._AcceptDate = value;
					this.SendPropertyChanged("AcceptDate");
					this.OnAcceptDateChanged();
				}
			}
		}
		
		[Column(Storage="_CloseDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> CloseDate
		{
			get
			{
				return this._CloseDate;
			}
			set
			{
				if ((this._CloseDate != value))
				{
					this.OnCloseDateChanging(value);
					this.SendPropertyChanging();
					this._CloseDate = value;
					this.SendPropertyChanged("CloseDate");
					this.OnCloseDateChanged();
				}
			}
		}
		
		[Association(Name="Channel_ChatMessage", Storage="_LiveChat_Messages", OtherKey="ChannelId")]
		public EntitySet<ChatMessage> LiveChat_Messages
		{
			get
			{
				return this._LiveChat_Messages;
			}
			set
			{
				this._LiveChat_Messages.Assign(value);
			}
		}
		
		[Association(Name="ChatRequest_Channel", Storage="_ChatRequest", ThisKey="RequestId", IsForeignKey=true)]
		public ChatRequest ChatRequest
		{
			get
			{
				return this._ChatRequest.Entity;
			}
			set
			{
				ChatRequest previousValue = this._ChatRequest.Entity;
				if (((previousValue != value) 
							|| (this._ChatRequest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChatRequest.Entity = null;
						previousValue.LiveChat_Channels.Remove(this);
					}
					this._ChatRequest.Entity = value;
					if ((value != null))
					{
						value.LiveChat_Channels.Add(this);
						this._RequestId = value.RequestId;
					}
					else
					{
						this._RequestId = default(int);
					}
					this.SendPropertyChanged("ChatRequest");
				}
			}
		}
		
		[Association(Name="Operator_Channel", Storage="_Operator", ThisKey="OperatorId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Operator Operator
		{
			get
			{
				return this._Operator.Entity;
			}
			set
			{
				Operator previousValue = this._Operator.Entity;
				if (((previousValue != value) 
							|| (this._Operator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Operator.Entity = null;
						previousValue.LiveChat_Channels.Remove(this);
					}
					this._Operator.Entity = value;
					if ((value != null))
					{
						value.LiveChat_Channels.Add(this);
						this._OperatorId = value.OperatorId;
					}
					else
					{
						this._OperatorId = default(int);
					}
					this.SendPropertyChanged("Operator");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LiveChat_Messages(ChatMessage entity)
		{
			this.SendPropertyChanging();
			entity.Channel = this;
		}
		
		private void detach_LiveChat_Messages(ChatMessage entity)
		{
			this.SendPropertyChanging();
			entity.Channel = null;
		}
	}
	
	[Table(Name="dbo.LiveChat_Messages")]
	public partial class ChatMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MessageId;
		
		private System.Guid _ChannelId;
		
		private string _FromName;
		
		private string _Message;
		
		private System.DateTime _SentDate;
		
		private EntityRef<Channel> _Channel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIdChanging(long value);
    partial void OnMessageIdChanged();
    partial void OnChannelIdChanging(System.Guid value);
    partial void OnChannelIdChanged();
    partial void OnFromNameChanging(string value);
    partial void OnFromNameChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnSentDateChanging(System.DateTime value);
    partial void OnSentDateChanged();
    #endregion
		
		public ChatMessage()
		{
			this._Channel = default(EntityRef<Channel>);
			OnCreated();
		}
		
		[Column(Storage="_MessageId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if ((this._MessageId != value))
				{
					this.OnMessageIdChanging(value);
					this.SendPropertyChanging();
					this._MessageId = value;
					this.SendPropertyChanged("MessageId");
					this.OnMessageIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChannelId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChannelId
		{
			get
			{
				return this._ChannelId;
			}
			set
			{
				if ((this._ChannelId != value))
				{
					if (this._Channel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChannelIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelId = value;
					this.SendPropertyChanged("ChannelId");
					this.OnChannelIdChanged();
				}
			}
		}
		
		[Column(Storage="_FromName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FromName
		{
			get
			{
				return this._FromName;
			}
			set
			{
				if ((this._FromName != value))
				{
					this.OnFromNameChanging(value);
					this.SendPropertyChanging();
					this._FromName = value;
					this.SendPropertyChanged("FromName");
					this.OnFromNameChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Storage="_SentDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime SentDate
		{
			get
			{
				return this._SentDate;
			}
			set
			{
				if ((this._SentDate != value))
				{
					this.OnSentDateChanging(value);
					this.SendPropertyChanging();
					this._SentDate = value;
					this.SendPropertyChanged("SentDate");
					this.OnSentDateChanged();
				}
			}
		}
		
		[Association(Name="Channel_ChatMessage", Storage="_Channel", ThisKey="ChannelId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Channel Channel
		{
			get
			{
				return this._Channel.Entity;
			}
			set
			{
				Channel previousValue = this._Channel.Entity;
				if (((previousValue != value) 
							|| (this._Channel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Channel.Entity = null;
						previousValue.LiveChat_Messages.Remove(this);
					}
					this._Channel.Entity = value;
					if ((value != null))
					{
						value.LiveChat_Messages.Add(this);
						this._ChannelId = value.ChannelId;
					}
					else
					{
						this._ChannelId = default(System.Guid);
					}
					this.SendPropertyChanged("Channel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LiveChat_VisitorHistories")]
	public partial class VisitorHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HistoryId;
		
		private string _VisitorIp;
		
		private string _RequestedPage;
		
		private System.DateTime _RequestedTime;
		
		private string _Referrer;
		
		private string _UserAgent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHistoryIdChanging(int value);
    partial void OnHistoryIdChanged();
    partial void OnVisitorIpChanging(string value);
    partial void OnVisitorIpChanged();
    partial void OnRequestedPageChanging(string value);
    partial void OnRequestedPageChanged();
    partial void OnRequestedTimeChanging(System.DateTime value);
    partial void OnRequestedTimeChanged();
    partial void OnReferrerChanging(string value);
    partial void OnReferrerChanged();
    partial void OnUserAgentChanging(string value);
    partial void OnUserAgentChanged();
    #endregion
		
		public VisitorHistory()
		{
			OnCreated();
		}
		
		[Column(Storage="_HistoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HistoryId
		{
			get
			{
				return this._HistoryId;
			}
			set
			{
				if ((this._HistoryId != value))
				{
					this.OnHistoryIdChanging(value);
					this.SendPropertyChanging();
					this._HistoryId = value;
					this.SendPropertyChanged("HistoryId");
					this.OnHistoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_VisitorIp", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string VisitorIp
		{
			get
			{
				return this._VisitorIp;
			}
			set
			{
				if ((this._VisitorIp != value))
				{
					this.OnVisitorIpChanging(value);
					this.SendPropertyChanging();
					this._VisitorIp = value;
					this.SendPropertyChanged("VisitorIp");
					this.OnVisitorIpChanged();
				}
			}
		}
		
		[Column(Storage="_RequestedPage", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string RequestedPage
		{
			get
			{
				return this._RequestedPage;
			}
			set
			{
				if ((this._RequestedPage != value))
				{
					this.OnRequestedPageChanging(value);
					this.SendPropertyChanging();
					this._RequestedPage = value;
					this.SendPropertyChanged("RequestedPage");
					this.OnRequestedPageChanged();
				}
			}
		}
		
		[Column(Storage="_RequestedTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime RequestedTime
		{
			get
			{
				return this._RequestedTime;
			}
			set
			{
				if ((this._RequestedTime != value))
				{
					this.OnRequestedTimeChanging(value);
					this.SendPropertyChanging();
					this._RequestedTime = value;
					this.SendPropertyChanged("RequestedTime");
					this.OnRequestedTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Referrer", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string Referrer
		{
			get
			{
				return this._Referrer;
			}
			set
			{
				if ((this._Referrer != value))
				{
					this.OnReferrerChanging(value);
					this.SendPropertyChanging();
					this._Referrer = value;
					this.SendPropertyChanged("Referrer");
					this.OnReferrerChanged();
				}
			}
		}
		
		[Column(Storage="_UserAgent", DbType="VarChar(85) NOT NULL", CanBeNull=false)]
		public string UserAgent
		{
			get
			{
				return this._UserAgent;
			}
			set
			{
				if ((this._UserAgent != value))
				{
					this.OnUserAgentChanging(value);
					this.SendPropertyChanging();
					this._UserAgent = value;
					this.SendPropertyChanged("UserAgent");
					this.OnUserAgentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
