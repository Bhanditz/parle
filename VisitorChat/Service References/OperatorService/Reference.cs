//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LiveChatStarterKit.VisitorChat.OperatorService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperatorEntity", Namespace="http://schemas.datacontract.org/2004/07/LiveChat.Entities")]
    public partial class OperatorEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string EmailField;
        
        private int EntityIdField;
        
        private bool IsAdminField;
        
        private bool IsOnlineField;
        
        private string NameField;
        
        private string PasswordField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EntityId {
            get {
                return this.EntityIdField;
            }
            set {
                if ((this.EntityIdField.Equals(value) != true)) {
                    this.EntityIdField = value;
                    this.RaisePropertyChanged("EntityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOnline {
            get {
                return this.IsOnlineField;
            }
            set {
                if ((this.IsOnlineField.Equals(value) != true)) {
                    this.IsOnlineField = value;
                    this.RaisePropertyChanged("IsOnline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChannelEntity", Namespace="http://schemas.datacontract.org/2004/07/LiveChat.Entities")]
    public partial class ChannelEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<System.DateTime> AcceptDateField;
        
        private System.Nullable<System.DateTime> CloseDateField;
        
        private string EntityIdField;
        
        private System.DateTime OpenDateField;
        
        private int OperatorIdField;
        
        private int RequestIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> AcceptDate {
            get {
                return this.AcceptDateField;
            }
            set {
                if ((this.AcceptDateField.Equals(value) != true)) {
                    this.AcceptDateField = value;
                    this.RaisePropertyChanged("AcceptDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CloseDate {
            get {
                return this.CloseDateField;
            }
            set {
                if ((this.CloseDateField.Equals(value) != true)) {
                    this.CloseDateField = value;
                    this.RaisePropertyChanged("CloseDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityId {
            get {
                return this.EntityIdField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityIdField, value) != true)) {
                    this.EntityIdField = value;
                    this.RaisePropertyChanged("EntityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime OpenDate {
            get {
                return this.OpenDateField;
            }
            set {
                if ((this.OpenDateField.Equals(value) != true)) {
                    this.OpenDateField = value;
                    this.RaisePropertyChanged("OpenDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OperatorId {
            get {
                return this.OperatorIdField;
            }
            set {
                if ((this.OperatorIdField.Equals(value) != true)) {
                    this.OperatorIdField = value;
                    this.RaisePropertyChanged("OperatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequestId {
            get {
                return this.RequestIdField;
            }
            set {
                if ((this.RequestIdField.Equals(value) != true)) {
                    this.RequestIdField = value;
                    this.RaisePropertyChanged("RequestId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="DepartmentEntity", Namespace="http://schemas.datacontract.org/2004/07/LiveChat.Entities")]
    public partial class DepartmentEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DepartmentNameField;
        
        private int EntityIdField;
        
        private bool IsActiveField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DepartmentName {
            get {
                return this.DepartmentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentNameField, value) != true)) {
                    this.DepartmentNameField = value;
                    this.RaisePropertyChanged("DepartmentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EntityId {
            get {
                return this.EntityIdField;
            }
            set {
                if ((this.EntityIdField.Equals(value) != true)) {
                    this.EntityIdField = value;
                    this.RaisePropertyChanged("EntityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.ServiceModel.ServiceContractAttribute()]
    public interface IOperator {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOperator/GetOnlineOperator", ReplyAction="http://tempuri.org/IOperator/GetOnlineOperatorResponse")]
        System.IAsyncResult BeginGetOnlineOperator(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity> EndGetOnlineOperator(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOperator/IsOperatorOnline", ReplyAction="http://tempuri.org/IOperator/IsOperatorOnlineResponse")]
        System.IAsyncResult BeginIsOperatorOnline(System.AsyncCallback callback, object asyncState);
        
        bool EndIsOperatorOnline(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOperator/Create", ReplyAction="http://tempuri.org/IOperator/CreateResponse")]
        System.IAsyncResult BeginCreate(string name, string password, string email, bool isAdmin, System.AsyncCallback callback, object asyncState);
        
        int EndCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOperator/UpdateStatus", ReplyAction="http://tempuri.org/IOperator/UpdateStatusResponse")]
        System.IAsyncResult BeginUpdateStatus(int operatorId, bool isOnline, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOperator/LogIn", ReplyAction="http://tempuri.org/IOperator/LogInResponse")]
        System.IAsyncResult BeginLogIn(string name, string password, System.AsyncCallback callback, object asyncState);
        
        LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity EndLogIn(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOperator/Remove", ReplyAction="http://tempuri.org/IOperator/RemoveResponse")]
        System.IAsyncResult BeginRemove(int operatorId, System.AsyncCallback callback, object asyncState);
        
        bool EndRemove(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOperator/GetChatChannel", ReplyAction="http://tempuri.org/IOperator/GetChatChannelResponse")]
        System.IAsyncResult BeginGetChatChannel(int operatorId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.ChannelEntity> EndGetChatChannel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOperator/GetOnlineDepartment", ReplyAction="http://tempuri.org/IOperator/GetOnlineDepartmentResponse")]
        System.IAsyncResult BeginGetOnlineDepartment(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.DepartmentEntity> EndGetOnlineDepartment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOperator/Fetch", ReplyAction="http://tempuri.org/IOperator/FetchResponse")]
        System.IAsyncResult BeginFetch(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity> EndFetch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOperator/Save", ReplyAction="http://tempuri.org/IOperator/SaveResponse")]
        System.IAsyncResult BeginSave(LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity updatedEntity, System.AsyncCallback callback, object asyncState);
        
        bool EndSave(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOperator/FetchDepartment", ReplyAction="http://tempuri.org/IOperator/FetchDepartmentResponse")]
        System.IAsyncResult BeginFetchDepartment(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.DepartmentEntity> EndFetchDepartment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOperator/CreateDepartment", ReplyAction="http://tempuri.org/IOperator/CreateDepartmentResponse")]
        System.IAsyncResult BeginCreateDepartment(string departmentName, System.AsyncCallback callback, object asyncState);
        
        int EndCreateDepartment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOperator/RemoveDepartment", ReplyAction="http://tempuri.org/IOperator/RemoveDepartmentResponse")]
        System.IAsyncResult BeginRemoveDepartment(int departmentId, System.AsyncCallback callback, object asyncState);
        
        bool EndRemoveDepartment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOperator/AddOperatorToDepartment", ReplyAction="http://tempuri.org/IOperator/AddOperatorToDepartmentResponse")]
        System.IAsyncResult BeginAddOperatorToDepartment(int departmentId, int operatorId, System.AsyncCallback callback, object asyncState);
        
        bool EndAddOperatorToDepartment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOperator/RemoveOperatorFromDepartment", ReplyAction="http://tempuri.org/IOperator/RemoveOperatorFromDepartmentResponse")]
        System.IAsyncResult BeginRemoveOperatorFromDepartment(int departmentId, int operatoriId, System.AsyncCallback callback, object asyncState);
        
        bool EndRemoveOperatorFromDepartment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOperator/GetOperator", ReplyAction="http://tempuri.org/IOperator/GetOperatorResponse")]
        System.IAsyncResult BeginGetOperator(int departmentId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity> EndGetOperator(System.IAsyncResult result);
    }
    
    public interface IOperatorChannel : LiveChatStarterKit.VisitorChat.OperatorService.IOperator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GetOnlineOperatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOnlineOperatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class IsOperatorOnlineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsOperatorOnlineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class LogInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LogInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class RemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GetChatChannelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetChatChannelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.ChannelEntity> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.ChannelEntity>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GetOnlineDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOnlineDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.DepartmentEntity> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.DepartmentEntity>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class FetchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class SaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class FetchDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.DepartmentEntity> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.DepartmentEntity>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class CreateDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class RemoveDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class AddOperatorToDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddOperatorToDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class RemoveOperatorFromDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveOperatorFromDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GetOperatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOperatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class OperatorClient : System.ServiceModel.ClientBase<LiveChatStarterKit.VisitorChat.OperatorService.IOperator>, LiveChatStarterKit.VisitorChat.OperatorService.IOperator {
        
        private BeginOperationDelegate onBeginGetOnlineOperatorDelegate;
        
        private EndOperationDelegate onEndGetOnlineOperatorDelegate;
        
        private System.Threading.SendOrPostCallback onGetOnlineOperatorCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsOperatorOnlineDelegate;
        
        private EndOperationDelegate onEndIsOperatorOnlineDelegate;
        
        private System.Threading.SendOrPostCallback onIsOperatorOnlineCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateDelegate;
        
        private EndOperationDelegate onEndCreateDelegate;
        
        private System.Threading.SendOrPostCallback onCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateStatusDelegate;
        
        private EndOperationDelegate onEndUpdateStatusDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogInDelegate;
        
        private EndOperationDelegate onEndLogInDelegate;
        
        private System.Threading.SendOrPostCallback onLogInCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveDelegate;
        
        private EndOperationDelegate onEndRemoveDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetChatChannelDelegate;
        
        private EndOperationDelegate onEndGetChatChannelDelegate;
        
        private System.Threading.SendOrPostCallback onGetChatChannelCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOnlineDepartmentDelegate;
        
        private EndOperationDelegate onEndGetOnlineDepartmentDelegate;
        
        private System.Threading.SendOrPostCallback onGetOnlineDepartmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchDelegate;
        
        private EndOperationDelegate onEndFetchDelegate;
        
        private System.Threading.SendOrPostCallback onFetchCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveDelegate;
        
        private EndOperationDelegate onEndSaveDelegate;
        
        private System.Threading.SendOrPostCallback onSaveCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchDepartmentDelegate;
        
        private EndOperationDelegate onEndFetchDepartmentDelegate;
        
        private System.Threading.SendOrPostCallback onFetchDepartmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateDepartmentDelegate;
        
        private EndOperationDelegate onEndCreateDepartmentDelegate;
        
        private System.Threading.SendOrPostCallback onCreateDepartmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveDepartmentDelegate;
        
        private EndOperationDelegate onEndRemoveDepartmentDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveDepartmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddOperatorToDepartmentDelegate;
        
        private EndOperationDelegate onEndAddOperatorToDepartmentDelegate;
        
        private System.Threading.SendOrPostCallback onAddOperatorToDepartmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveOperatorFromDepartmentDelegate;
        
        private EndOperationDelegate onEndRemoveOperatorFromDepartmentDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveOperatorFromDepartmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOperatorDelegate;
        
        private EndOperationDelegate onEndGetOperatorDelegate;
        
        private System.Threading.SendOrPostCallback onGetOperatorCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public OperatorClient() {
        }
        
        public OperatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OperatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OperatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OperatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetOnlineOperatorCompletedEventArgs> GetOnlineOperatorCompleted;
        
        public event System.EventHandler<IsOperatorOnlineCompletedEventArgs> IsOperatorOnlineCompleted;
        
        public event System.EventHandler<CreateCompletedEventArgs> CreateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateStatusCompleted;
        
        public event System.EventHandler<LogInCompletedEventArgs> LogInCompleted;
        
        public event System.EventHandler<RemoveCompletedEventArgs> RemoveCompleted;
        
        public event System.EventHandler<GetChatChannelCompletedEventArgs> GetChatChannelCompleted;
        
        public event System.EventHandler<GetOnlineDepartmentCompletedEventArgs> GetOnlineDepartmentCompleted;
        
        public event System.EventHandler<FetchCompletedEventArgs> FetchCompleted;
        
        public event System.EventHandler<SaveCompletedEventArgs> SaveCompleted;
        
        public event System.EventHandler<FetchDepartmentCompletedEventArgs> FetchDepartmentCompleted;
        
        public event System.EventHandler<CreateDepartmentCompletedEventArgs> CreateDepartmentCompleted;
        
        public event System.EventHandler<RemoveDepartmentCompletedEventArgs> RemoveDepartmentCompleted;
        
        public event System.EventHandler<AddOperatorToDepartmentCompletedEventArgs> AddOperatorToDepartmentCompleted;
        
        public event System.EventHandler<RemoveOperatorFromDepartmentCompletedEventArgs> RemoveOperatorFromDepartmentCompleted;
        
        public event System.EventHandler<GetOperatorCompletedEventArgs> GetOperatorCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.OperatorService.IOperator.BeginGetOnlineOperator(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOnlineOperator(callback, asyncState);
        }
        
        System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity> LiveChatStarterKit.VisitorChat.OperatorService.IOperator.EndGetOnlineOperator(System.IAsyncResult result) {
            return base.Channel.EndGetOnlineOperator(result);
        }
        
        private System.IAsyncResult OnBeginGetOnlineOperator(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).BeginGetOnlineOperator(callback, asyncState);
        }
        
        private object[] OnEndGetOnlineOperator(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity> retVal = ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).EndGetOnlineOperator(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOnlineOperatorCompleted(object state) {
            if ((this.GetOnlineOperatorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOnlineOperatorCompleted(this, new GetOnlineOperatorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOnlineOperatorAsync() {
            this.GetOnlineOperatorAsync(null);
        }
        
        public void GetOnlineOperatorAsync(object userState) {
            if ((this.onBeginGetOnlineOperatorDelegate == null)) {
                this.onBeginGetOnlineOperatorDelegate = new BeginOperationDelegate(this.OnBeginGetOnlineOperator);
            }
            if ((this.onEndGetOnlineOperatorDelegate == null)) {
                this.onEndGetOnlineOperatorDelegate = new EndOperationDelegate(this.OnEndGetOnlineOperator);
            }
            if ((this.onGetOnlineOperatorCompletedDelegate == null)) {
                this.onGetOnlineOperatorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOnlineOperatorCompleted);
            }
            base.InvokeAsync(this.onBeginGetOnlineOperatorDelegate, null, this.onEndGetOnlineOperatorDelegate, this.onGetOnlineOperatorCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.OperatorService.IOperator.BeginIsOperatorOnline(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsOperatorOnline(callback, asyncState);
        }
        
        bool LiveChatStarterKit.VisitorChat.OperatorService.IOperator.EndIsOperatorOnline(System.IAsyncResult result) {
            return base.Channel.EndIsOperatorOnline(result);
        }
        
        private System.IAsyncResult OnBeginIsOperatorOnline(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).BeginIsOperatorOnline(callback, asyncState);
        }
        
        private object[] OnEndIsOperatorOnline(System.IAsyncResult result) {
            bool retVal = ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).EndIsOperatorOnline(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsOperatorOnlineCompleted(object state) {
            if ((this.IsOperatorOnlineCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsOperatorOnlineCompleted(this, new IsOperatorOnlineCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsOperatorOnlineAsync() {
            this.IsOperatorOnlineAsync(null);
        }
        
        public void IsOperatorOnlineAsync(object userState) {
            if ((this.onBeginIsOperatorOnlineDelegate == null)) {
                this.onBeginIsOperatorOnlineDelegate = new BeginOperationDelegate(this.OnBeginIsOperatorOnline);
            }
            if ((this.onEndIsOperatorOnlineDelegate == null)) {
                this.onEndIsOperatorOnlineDelegate = new EndOperationDelegate(this.OnEndIsOperatorOnline);
            }
            if ((this.onIsOperatorOnlineCompletedDelegate == null)) {
                this.onIsOperatorOnlineCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsOperatorOnlineCompleted);
            }
            base.InvokeAsync(this.onBeginIsOperatorOnlineDelegate, null, this.onEndIsOperatorOnlineDelegate, this.onIsOperatorOnlineCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.OperatorService.IOperator.BeginCreate(string name, string password, string email, bool isAdmin, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreate(name, password, email, isAdmin, callback, asyncState);
        }
        
        int LiveChatStarterKit.VisitorChat.OperatorService.IOperator.EndCreate(System.IAsyncResult result) {
            return base.Channel.EndCreate(result);
        }
        
        private System.IAsyncResult OnBeginCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string email = ((string)(inValues[2]));
            bool isAdmin = ((bool)(inValues[3]));
            return ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).BeginCreate(name, password, email, isAdmin, callback, asyncState);
        }
        
        private object[] OnEndCreate(System.IAsyncResult result) {
            int retVal = ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).EndCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateCompleted(object state) {
            if ((this.CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateCompleted(this, new CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateAsync(string name, string password, string email, bool isAdmin) {
            this.CreateAsync(name, password, email, isAdmin, null);
        }
        
        public void CreateAsync(string name, string password, string email, bool isAdmin, object userState) {
            if ((this.onBeginCreateDelegate == null)) {
                this.onBeginCreateDelegate = new BeginOperationDelegate(this.OnBeginCreate);
            }
            if ((this.onEndCreateDelegate == null)) {
                this.onEndCreateDelegate = new EndOperationDelegate(this.OnEndCreate);
            }
            if ((this.onCreateCompletedDelegate == null)) {
                this.onCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateCompleted);
            }
            base.InvokeAsync(this.onBeginCreateDelegate, new object[] {
                        name,
                        password,
                        email,
                        isAdmin}, this.onEndCreateDelegate, this.onCreateCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.OperatorService.IOperator.BeginUpdateStatus(int operatorId, bool isOnline, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateStatus(operatorId, isOnline, callback, asyncState);
        }
        
        void LiveChatStarterKit.VisitorChat.OperatorService.IOperator.EndUpdateStatus(System.IAsyncResult result) {
            base.Channel.EndUpdateStatus(result);
        }
        
        private System.IAsyncResult OnBeginUpdateStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int operatorId = ((int)(inValues[0]));
            bool isOnline = ((bool)(inValues[1]));
            return ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).BeginUpdateStatus(operatorId, isOnline, callback, asyncState);
        }
        
        private object[] OnEndUpdateStatus(System.IAsyncResult result) {
            ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).EndUpdateStatus(result);
            return null;
        }
        
        private void OnUpdateStatusCompleted(object state) {
            if ((this.UpdateStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateStatusAsync(int operatorId, bool isOnline) {
            this.UpdateStatusAsync(operatorId, isOnline, null);
        }
        
        public void UpdateStatusAsync(int operatorId, bool isOnline, object userState) {
            if ((this.onBeginUpdateStatusDelegate == null)) {
                this.onBeginUpdateStatusDelegate = new BeginOperationDelegate(this.OnBeginUpdateStatus);
            }
            if ((this.onEndUpdateStatusDelegate == null)) {
                this.onEndUpdateStatusDelegate = new EndOperationDelegate(this.OnEndUpdateStatus);
            }
            if ((this.onUpdateStatusCompletedDelegate == null)) {
                this.onUpdateStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateStatusCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateStatusDelegate, new object[] {
                        operatorId,
                        isOnline}, this.onEndUpdateStatusDelegate, this.onUpdateStatusCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.OperatorService.IOperator.BeginLogIn(string name, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogIn(name, password, callback, asyncState);
        }
        
        LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity LiveChatStarterKit.VisitorChat.OperatorService.IOperator.EndLogIn(System.IAsyncResult result) {
            return base.Channel.EndLogIn(result);
        }
        
        private System.IAsyncResult OnBeginLogIn(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).BeginLogIn(name, password, callback, asyncState);
        }
        
        private object[] OnEndLogIn(System.IAsyncResult result) {
            LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity retVal = ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).EndLogIn(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLogInCompleted(object state) {
            if ((this.LogInCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogInCompleted(this, new LogInCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogInAsync(string name, string password) {
            this.LogInAsync(name, password, null);
        }
        
        public void LogInAsync(string name, string password, object userState) {
            if ((this.onBeginLogInDelegate == null)) {
                this.onBeginLogInDelegate = new BeginOperationDelegate(this.OnBeginLogIn);
            }
            if ((this.onEndLogInDelegate == null)) {
                this.onEndLogInDelegate = new EndOperationDelegate(this.OnEndLogIn);
            }
            if ((this.onLogInCompletedDelegate == null)) {
                this.onLogInCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogInCompleted);
            }
            base.InvokeAsync(this.onBeginLogInDelegate, new object[] {
                        name,
                        password}, this.onEndLogInDelegate, this.onLogInCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.OperatorService.IOperator.BeginRemove(int operatorId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemove(operatorId, callback, asyncState);
        }
        
        bool LiveChatStarterKit.VisitorChat.OperatorService.IOperator.EndRemove(System.IAsyncResult result) {
            return base.Channel.EndRemove(result);
        }
        
        private System.IAsyncResult OnBeginRemove(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int operatorId = ((int)(inValues[0]));
            return ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).BeginRemove(operatorId, callback, asyncState);
        }
        
        private object[] OnEndRemove(System.IAsyncResult result) {
            bool retVal = ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).EndRemove(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveCompleted(object state) {
            if ((this.RemoveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveCompleted(this, new RemoveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveAsync(int operatorId) {
            this.RemoveAsync(operatorId, null);
        }
        
        public void RemoveAsync(int operatorId, object userState) {
            if ((this.onBeginRemoveDelegate == null)) {
                this.onBeginRemoveDelegate = new BeginOperationDelegate(this.OnBeginRemove);
            }
            if ((this.onEndRemoveDelegate == null)) {
                this.onEndRemoveDelegate = new EndOperationDelegate(this.OnEndRemove);
            }
            if ((this.onRemoveCompletedDelegate == null)) {
                this.onRemoveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveDelegate, new object[] {
                        operatorId}, this.onEndRemoveDelegate, this.onRemoveCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.OperatorService.IOperator.BeginGetChatChannel(int operatorId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetChatChannel(operatorId, callback, asyncState);
        }
        
        System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.ChannelEntity> LiveChatStarterKit.VisitorChat.OperatorService.IOperator.EndGetChatChannel(System.IAsyncResult result) {
            return base.Channel.EndGetChatChannel(result);
        }
        
        private System.IAsyncResult OnBeginGetChatChannel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int operatorId = ((int)(inValues[0]));
            return ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).BeginGetChatChannel(operatorId, callback, asyncState);
        }
        
        private object[] OnEndGetChatChannel(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.ChannelEntity> retVal = ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).EndGetChatChannel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetChatChannelCompleted(object state) {
            if ((this.GetChatChannelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetChatChannelCompleted(this, new GetChatChannelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetChatChannelAsync(int operatorId) {
            this.GetChatChannelAsync(operatorId, null);
        }
        
        public void GetChatChannelAsync(int operatorId, object userState) {
            if ((this.onBeginGetChatChannelDelegate == null)) {
                this.onBeginGetChatChannelDelegate = new BeginOperationDelegate(this.OnBeginGetChatChannel);
            }
            if ((this.onEndGetChatChannelDelegate == null)) {
                this.onEndGetChatChannelDelegate = new EndOperationDelegate(this.OnEndGetChatChannel);
            }
            if ((this.onGetChatChannelCompletedDelegate == null)) {
                this.onGetChatChannelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetChatChannelCompleted);
            }
            base.InvokeAsync(this.onBeginGetChatChannelDelegate, new object[] {
                        operatorId}, this.onEndGetChatChannelDelegate, this.onGetChatChannelCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.OperatorService.IOperator.BeginGetOnlineDepartment(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOnlineDepartment(callback, asyncState);
        }
        
        System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.DepartmentEntity> LiveChatStarterKit.VisitorChat.OperatorService.IOperator.EndGetOnlineDepartment(System.IAsyncResult result) {
            return base.Channel.EndGetOnlineDepartment(result);
        }
        
        private System.IAsyncResult OnBeginGetOnlineDepartment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).BeginGetOnlineDepartment(callback, asyncState);
        }
        
        private object[] OnEndGetOnlineDepartment(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.DepartmentEntity> retVal = ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).EndGetOnlineDepartment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOnlineDepartmentCompleted(object state) {
            if ((this.GetOnlineDepartmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOnlineDepartmentCompleted(this, new GetOnlineDepartmentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOnlineDepartmentAsync() {
            this.GetOnlineDepartmentAsync(null);
        }
        
        public void GetOnlineDepartmentAsync(object userState) {
            if ((this.onBeginGetOnlineDepartmentDelegate == null)) {
                this.onBeginGetOnlineDepartmentDelegate = new BeginOperationDelegate(this.OnBeginGetOnlineDepartment);
            }
            if ((this.onEndGetOnlineDepartmentDelegate == null)) {
                this.onEndGetOnlineDepartmentDelegate = new EndOperationDelegate(this.OnEndGetOnlineDepartment);
            }
            if ((this.onGetOnlineDepartmentCompletedDelegate == null)) {
                this.onGetOnlineDepartmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOnlineDepartmentCompleted);
            }
            base.InvokeAsync(this.onBeginGetOnlineDepartmentDelegate, null, this.onEndGetOnlineDepartmentDelegate, this.onGetOnlineDepartmentCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.OperatorService.IOperator.BeginFetch(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetch(callback, asyncState);
        }
        
        System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity> LiveChatStarterKit.VisitorChat.OperatorService.IOperator.EndFetch(System.IAsyncResult result) {
            return base.Channel.EndFetch(result);
        }
        
        private System.IAsyncResult OnBeginFetch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).BeginFetch(callback, asyncState);
        }
        
        private object[] OnEndFetch(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity> retVal = ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).EndFetch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchCompleted(object state) {
            if ((this.FetchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchCompleted(this, new FetchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchAsync() {
            this.FetchAsync(null);
        }
        
        public void FetchAsync(object userState) {
            if ((this.onBeginFetchDelegate == null)) {
                this.onBeginFetchDelegate = new BeginOperationDelegate(this.OnBeginFetch);
            }
            if ((this.onEndFetchDelegate == null)) {
                this.onEndFetchDelegate = new EndOperationDelegate(this.OnEndFetch);
            }
            if ((this.onFetchCompletedDelegate == null)) {
                this.onFetchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchCompleted);
            }
            base.InvokeAsync(this.onBeginFetchDelegate, null, this.onEndFetchDelegate, this.onFetchCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.OperatorService.IOperator.BeginSave(LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity updatedEntity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSave(updatedEntity, callback, asyncState);
        }
        
        bool LiveChatStarterKit.VisitorChat.OperatorService.IOperator.EndSave(System.IAsyncResult result) {
            return base.Channel.EndSave(result);
        }
        
        private System.IAsyncResult OnBeginSave(object[] inValues, System.AsyncCallback callback, object asyncState) {
            LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity updatedEntity = ((LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity)(inValues[0]));
            return ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).BeginSave(updatedEntity, callback, asyncState);
        }
        
        private object[] OnEndSave(System.IAsyncResult result) {
            bool retVal = ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).EndSave(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveCompleted(object state) {
            if ((this.SaveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveCompleted(this, new SaveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveAsync(LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity updatedEntity) {
            this.SaveAsync(updatedEntity, null);
        }
        
        public void SaveAsync(LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity updatedEntity, object userState) {
            if ((this.onBeginSaveDelegate == null)) {
                this.onBeginSaveDelegate = new BeginOperationDelegate(this.OnBeginSave);
            }
            if ((this.onEndSaveDelegate == null)) {
                this.onEndSaveDelegate = new EndOperationDelegate(this.OnEndSave);
            }
            if ((this.onSaveCompletedDelegate == null)) {
                this.onSaveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveCompleted);
            }
            base.InvokeAsync(this.onBeginSaveDelegate, new object[] {
                        updatedEntity}, this.onEndSaveDelegate, this.onSaveCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.OperatorService.IOperator.BeginFetchDepartment(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchDepartment(callback, asyncState);
        }
        
        System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.DepartmentEntity> LiveChatStarterKit.VisitorChat.OperatorService.IOperator.EndFetchDepartment(System.IAsyncResult result) {
            return base.Channel.EndFetchDepartment(result);
        }
        
        private System.IAsyncResult OnBeginFetchDepartment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).BeginFetchDepartment(callback, asyncState);
        }
        
        private object[] OnEndFetchDepartment(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.DepartmentEntity> retVal = ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).EndFetchDepartment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchDepartmentCompleted(object state) {
            if ((this.FetchDepartmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchDepartmentCompleted(this, new FetchDepartmentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchDepartmentAsync() {
            this.FetchDepartmentAsync(null);
        }
        
        public void FetchDepartmentAsync(object userState) {
            if ((this.onBeginFetchDepartmentDelegate == null)) {
                this.onBeginFetchDepartmentDelegate = new BeginOperationDelegate(this.OnBeginFetchDepartment);
            }
            if ((this.onEndFetchDepartmentDelegate == null)) {
                this.onEndFetchDepartmentDelegate = new EndOperationDelegate(this.OnEndFetchDepartment);
            }
            if ((this.onFetchDepartmentCompletedDelegate == null)) {
                this.onFetchDepartmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchDepartmentCompleted);
            }
            base.InvokeAsync(this.onBeginFetchDepartmentDelegate, null, this.onEndFetchDepartmentDelegate, this.onFetchDepartmentCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.OperatorService.IOperator.BeginCreateDepartment(string departmentName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateDepartment(departmentName, callback, asyncState);
        }
        
        int LiveChatStarterKit.VisitorChat.OperatorService.IOperator.EndCreateDepartment(System.IAsyncResult result) {
            return base.Channel.EndCreateDepartment(result);
        }
        
        private System.IAsyncResult OnBeginCreateDepartment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string departmentName = ((string)(inValues[0]));
            return ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).BeginCreateDepartment(departmentName, callback, asyncState);
        }
        
        private object[] OnEndCreateDepartment(System.IAsyncResult result) {
            int retVal = ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).EndCreateDepartment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateDepartmentCompleted(object state) {
            if ((this.CreateDepartmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateDepartmentCompleted(this, new CreateDepartmentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateDepartmentAsync(string departmentName) {
            this.CreateDepartmentAsync(departmentName, null);
        }
        
        public void CreateDepartmentAsync(string departmentName, object userState) {
            if ((this.onBeginCreateDepartmentDelegate == null)) {
                this.onBeginCreateDepartmentDelegate = new BeginOperationDelegate(this.OnBeginCreateDepartment);
            }
            if ((this.onEndCreateDepartmentDelegate == null)) {
                this.onEndCreateDepartmentDelegate = new EndOperationDelegate(this.OnEndCreateDepartment);
            }
            if ((this.onCreateDepartmentCompletedDelegate == null)) {
                this.onCreateDepartmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateDepartmentCompleted);
            }
            base.InvokeAsync(this.onBeginCreateDepartmentDelegate, new object[] {
                        departmentName}, this.onEndCreateDepartmentDelegate, this.onCreateDepartmentCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.OperatorService.IOperator.BeginRemoveDepartment(int departmentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveDepartment(departmentId, callback, asyncState);
        }
        
        bool LiveChatStarterKit.VisitorChat.OperatorService.IOperator.EndRemoveDepartment(System.IAsyncResult result) {
            return base.Channel.EndRemoveDepartment(result);
        }
        
        private System.IAsyncResult OnBeginRemoveDepartment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int departmentId = ((int)(inValues[0]));
            return ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).BeginRemoveDepartment(departmentId, callback, asyncState);
        }
        
        private object[] OnEndRemoveDepartment(System.IAsyncResult result) {
            bool retVal = ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).EndRemoveDepartment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveDepartmentCompleted(object state) {
            if ((this.RemoveDepartmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveDepartmentCompleted(this, new RemoveDepartmentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveDepartmentAsync(int departmentId) {
            this.RemoveDepartmentAsync(departmentId, null);
        }
        
        public void RemoveDepartmentAsync(int departmentId, object userState) {
            if ((this.onBeginRemoveDepartmentDelegate == null)) {
                this.onBeginRemoveDepartmentDelegate = new BeginOperationDelegate(this.OnBeginRemoveDepartment);
            }
            if ((this.onEndRemoveDepartmentDelegate == null)) {
                this.onEndRemoveDepartmentDelegate = new EndOperationDelegate(this.OnEndRemoveDepartment);
            }
            if ((this.onRemoveDepartmentCompletedDelegate == null)) {
                this.onRemoveDepartmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveDepartmentCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveDepartmentDelegate, new object[] {
                        departmentId}, this.onEndRemoveDepartmentDelegate, this.onRemoveDepartmentCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.OperatorService.IOperator.BeginAddOperatorToDepartment(int departmentId, int operatorId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddOperatorToDepartment(departmentId, operatorId, callback, asyncState);
        }
        
        bool LiveChatStarterKit.VisitorChat.OperatorService.IOperator.EndAddOperatorToDepartment(System.IAsyncResult result) {
            return base.Channel.EndAddOperatorToDepartment(result);
        }
        
        private System.IAsyncResult OnBeginAddOperatorToDepartment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int departmentId = ((int)(inValues[0]));
            int operatorId = ((int)(inValues[1]));
            return ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).BeginAddOperatorToDepartment(departmentId, operatorId, callback, asyncState);
        }
        
        private object[] OnEndAddOperatorToDepartment(System.IAsyncResult result) {
            bool retVal = ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).EndAddOperatorToDepartment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddOperatorToDepartmentCompleted(object state) {
            if ((this.AddOperatorToDepartmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddOperatorToDepartmentCompleted(this, new AddOperatorToDepartmentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddOperatorToDepartmentAsync(int departmentId, int operatorId) {
            this.AddOperatorToDepartmentAsync(departmentId, operatorId, null);
        }
        
        public void AddOperatorToDepartmentAsync(int departmentId, int operatorId, object userState) {
            if ((this.onBeginAddOperatorToDepartmentDelegate == null)) {
                this.onBeginAddOperatorToDepartmentDelegate = new BeginOperationDelegate(this.OnBeginAddOperatorToDepartment);
            }
            if ((this.onEndAddOperatorToDepartmentDelegate == null)) {
                this.onEndAddOperatorToDepartmentDelegate = new EndOperationDelegate(this.OnEndAddOperatorToDepartment);
            }
            if ((this.onAddOperatorToDepartmentCompletedDelegate == null)) {
                this.onAddOperatorToDepartmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddOperatorToDepartmentCompleted);
            }
            base.InvokeAsync(this.onBeginAddOperatorToDepartmentDelegate, new object[] {
                        departmentId,
                        operatorId}, this.onEndAddOperatorToDepartmentDelegate, this.onAddOperatorToDepartmentCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.OperatorService.IOperator.BeginRemoveOperatorFromDepartment(int departmentId, int operatoriId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveOperatorFromDepartment(departmentId, operatoriId, callback, asyncState);
        }
        
        bool LiveChatStarterKit.VisitorChat.OperatorService.IOperator.EndRemoveOperatorFromDepartment(System.IAsyncResult result) {
            return base.Channel.EndRemoveOperatorFromDepartment(result);
        }
        
        private System.IAsyncResult OnBeginRemoveOperatorFromDepartment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int departmentId = ((int)(inValues[0]));
            int operatoriId = ((int)(inValues[1]));
            return ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).BeginRemoveOperatorFromDepartment(departmentId, operatoriId, callback, asyncState);
        }
        
        private object[] OnEndRemoveOperatorFromDepartment(System.IAsyncResult result) {
            bool retVal = ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).EndRemoveOperatorFromDepartment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveOperatorFromDepartmentCompleted(object state) {
            if ((this.RemoveOperatorFromDepartmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveOperatorFromDepartmentCompleted(this, new RemoveOperatorFromDepartmentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveOperatorFromDepartmentAsync(int departmentId, int operatoriId) {
            this.RemoveOperatorFromDepartmentAsync(departmentId, operatoriId, null);
        }
        
        public void RemoveOperatorFromDepartmentAsync(int departmentId, int operatoriId, object userState) {
            if ((this.onBeginRemoveOperatorFromDepartmentDelegate == null)) {
                this.onBeginRemoveOperatorFromDepartmentDelegate = new BeginOperationDelegate(this.OnBeginRemoveOperatorFromDepartment);
            }
            if ((this.onEndRemoveOperatorFromDepartmentDelegate == null)) {
                this.onEndRemoveOperatorFromDepartmentDelegate = new EndOperationDelegate(this.OnEndRemoveOperatorFromDepartment);
            }
            if ((this.onRemoveOperatorFromDepartmentCompletedDelegate == null)) {
                this.onRemoveOperatorFromDepartmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveOperatorFromDepartmentCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveOperatorFromDepartmentDelegate, new object[] {
                        departmentId,
                        operatoriId}, this.onEndRemoveOperatorFromDepartmentDelegate, this.onRemoveOperatorFromDepartmentCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.OperatorService.IOperator.BeginGetOperator(int departmentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOperator(departmentId, callback, asyncState);
        }
        
        System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity> LiveChatStarterKit.VisitorChat.OperatorService.IOperator.EndGetOperator(System.IAsyncResult result) {
            return base.Channel.EndGetOperator(result);
        }
        
        private System.IAsyncResult OnBeginGetOperator(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int departmentId = ((int)(inValues[0]));
            return ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).BeginGetOperator(departmentId, callback, asyncState);
        }
        
        private object[] OnEndGetOperator(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity> retVal = ((LiveChatStarterKit.VisitorChat.OperatorService.IOperator)(this)).EndGetOperator(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOperatorCompleted(object state) {
            if ((this.GetOperatorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOperatorCompleted(this, new GetOperatorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOperatorAsync(int departmentId) {
            this.GetOperatorAsync(departmentId, null);
        }
        
        public void GetOperatorAsync(int departmentId, object userState) {
            if ((this.onBeginGetOperatorDelegate == null)) {
                this.onBeginGetOperatorDelegate = new BeginOperationDelegate(this.OnBeginGetOperator);
            }
            if ((this.onEndGetOperatorDelegate == null)) {
                this.onEndGetOperatorDelegate = new EndOperationDelegate(this.OnEndGetOperator);
            }
            if ((this.onGetOperatorCompletedDelegate == null)) {
                this.onGetOperatorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOperatorCompleted);
            }
            base.InvokeAsync(this.onBeginGetOperatorDelegate, new object[] {
                        departmentId}, this.onEndGetOperatorDelegate, this.onGetOperatorCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override LiveChatStarterKit.VisitorChat.OperatorService.IOperator CreateChannel() {
            return new OperatorClientChannel(this);
        }
        
        private class OperatorClientChannel : ChannelBase<LiveChatStarterKit.VisitorChat.OperatorService.IOperator>, LiveChatStarterKit.VisitorChat.OperatorService.IOperator {
            
            public OperatorClientChannel(System.ServiceModel.ClientBase<LiveChatStarterKit.VisitorChat.OperatorService.IOperator> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetOnlineOperator(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetOnlineOperator", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity> EndGetOnlineOperator(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity> _result = ((System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity>)(base.EndInvoke("GetOnlineOperator", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsOperatorOnline(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("IsOperatorOnline", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsOperatorOnline(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsOperatorOnline", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreate(string name, string password, string email, bool isAdmin, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = name;
                _args[1] = password;
                _args[2] = email;
                _args[3] = isAdmin;
                System.IAsyncResult _result = base.BeginInvoke("Create", _args, callback, asyncState);
                return _result;
            }
            
            public int EndCreate(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("Create", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateStatus(int operatorId, bool isOnline, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = operatorId;
                _args[1] = isOnline;
                System.IAsyncResult _result = base.BeginInvoke("UpdateStatus", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateStatus", _args, result);
            }
            
            public System.IAsyncResult BeginLogIn(string name, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = name;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("LogIn", _args, callback, asyncState);
                return _result;
            }
            
            public LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity EndLogIn(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity _result = ((LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity)(base.EndInvoke("LogIn", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemove(int operatorId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = operatorId;
                System.IAsyncResult _result = base.BeginInvoke("Remove", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRemove(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Remove", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetChatChannel(int operatorId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = operatorId;
                System.IAsyncResult _result = base.BeginInvoke("GetChatChannel", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.ChannelEntity> EndGetChatChannel(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.ChannelEntity> _result = ((System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.ChannelEntity>)(base.EndInvoke("GetChatChannel", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOnlineDepartment(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetOnlineDepartment", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.DepartmentEntity> EndGetOnlineDepartment(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.DepartmentEntity> _result = ((System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.DepartmentEntity>)(base.EndInvoke("GetOnlineDepartment", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFetch(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Fetch", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity> EndFetch(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity> _result = ((System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity>)(base.EndInvoke("Fetch", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSave(LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity updatedEntity, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = updatedEntity;
                System.IAsyncResult _result = base.BeginInvoke("Save", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSave(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Save", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFetchDepartment(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("FetchDepartment", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.DepartmentEntity> EndFetchDepartment(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.DepartmentEntity> _result = ((System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.DepartmentEntity>)(base.EndInvoke("FetchDepartment", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateDepartment(string departmentName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = departmentName;
                System.IAsyncResult _result = base.BeginInvoke("CreateDepartment", _args, callback, asyncState);
                return _result;
            }
            
            public int EndCreateDepartment(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("CreateDepartment", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveDepartment(int departmentId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = departmentId;
                System.IAsyncResult _result = base.BeginInvoke("RemoveDepartment", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRemoveDepartment(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RemoveDepartment", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddOperatorToDepartment(int departmentId, int operatorId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = departmentId;
                _args[1] = operatorId;
                System.IAsyncResult _result = base.BeginInvoke("AddOperatorToDepartment", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddOperatorToDepartment(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddOperatorToDepartment", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveOperatorFromDepartment(int departmentId, int operatoriId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = departmentId;
                _args[1] = operatoriId;
                System.IAsyncResult _result = base.BeginInvoke("RemoveOperatorFromDepartment", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRemoveOperatorFromDepartment(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RemoveOperatorFromDepartment", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOperator(int departmentId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = departmentId;
                System.IAsyncResult _result = base.BeginInvoke("GetOperator", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity> EndGetOperator(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity> _result = ((System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.OperatorService.OperatorEntity>)(base.EndInvoke("GetOperator", _args, result)));
                return _result;
            }
        }
    }
}
