//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LiveChatStarterKit.VisitorChat.ChatService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatRequestEntity", Namespace="http://schemas.datacontract.org/2004/07/LiveChat.Entities")]
    public partial class ChatRequestEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int DepartmentIdField;
        
        private int EntityIdField;
        
        private System.DateTime RequestedDateField;
        
        private bool SendCopyOfChatField;
        
        private string VisitorEmailField;
        
        private string VisitorIpField;
        
        private string VisitorNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DepartmentId {
            get {
                return this.DepartmentIdField;
            }
            set {
                if ((this.DepartmentIdField.Equals(value) != true)) {
                    this.DepartmentIdField = value;
                    this.RaisePropertyChanged("DepartmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EntityId {
            get {
                return this.EntityIdField;
            }
            set {
                if ((this.EntityIdField.Equals(value) != true)) {
                    this.EntityIdField = value;
                    this.RaisePropertyChanged("EntityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RequestedDate {
            get {
                return this.RequestedDateField;
            }
            set {
                if ((this.RequestedDateField.Equals(value) != true)) {
                    this.RequestedDateField = value;
                    this.RaisePropertyChanged("RequestedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SendCopyOfChat {
            get {
                return this.SendCopyOfChatField;
            }
            set {
                if ((this.SendCopyOfChatField.Equals(value) != true)) {
                    this.SendCopyOfChatField = value;
                    this.RaisePropertyChanged("SendCopyOfChat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VisitorEmail {
            get {
                return this.VisitorEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.VisitorEmailField, value) != true)) {
                    this.VisitorEmailField = value;
                    this.RaisePropertyChanged("VisitorEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VisitorIp {
            get {
                return this.VisitorIpField;
            }
            set {
                if ((object.ReferenceEquals(this.VisitorIpField, value) != true)) {
                    this.VisitorIpField = value;
                    this.RaisePropertyChanged("VisitorIp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VisitorName {
            get {
                return this.VisitorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VisitorNameField, value) != true)) {
                    this.VisitorNameField = value;
                    this.RaisePropertyChanged("VisitorName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageEntity", Namespace="http://schemas.datacontract.org/2004/07/LiveChat.Entities")]
    public partial class MessageEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ChannelIdField;
        
        private long EntityIdField;
        
        private string FromNameField;
        
        private string MessageField;
        
        private System.DateTime SendDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChannelId {
            get {
                return this.ChannelIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ChannelIdField, value) != true)) {
                    this.ChannelIdField = value;
                    this.RaisePropertyChanged("ChannelId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long EntityId {
            get {
                return this.EntityIdField;
            }
            set {
                if ((this.EntityIdField.Equals(value) != true)) {
                    this.EntityIdField = value;
                    this.RaisePropertyChanged("EntityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FromName {
            get {
                return this.FromNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FromNameField, value) != true)) {
                    this.FromNameField = value;
                    this.RaisePropertyChanged("FromName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SendDate {
            get {
                return this.SendDateField;
            }
            set {
                if ((this.SendDateField.Equals(value) != true)) {
                    this.SendDateField = value;
                    this.RaisePropertyChanged("SendDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.ServiceModel.ServiceContractAttribute()]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChatService/RequestChat", ReplyAction="http://tempuri.org/IChatService/RequestChatResponse")]
        System.IAsyncResult BeginRequestChat(LiveChatStarterKit.VisitorChat.ChatService.ChatRequestEntity request, System.AsyncCallback callback, object asyncState);
        
        string EndRequestChat(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChatService/WriteMessage", ReplyAction="http://tempuri.org/IChatService/WriteMessageResponse")]
        System.IAsyncResult BeginWriteMessage(LiveChatStarterKit.VisitorChat.ChatService.MessageEntity msg, System.AsyncCallback callback, object asyncState);
        
        void EndWriteMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChatService/GetMessages", ReplyAction="http://tempuri.org/IChatService/GetMessagesResponse")]
        System.IAsyncResult BeginGetMessages(string channelId, long lastId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.ChatService.MessageEntity> EndGetMessages(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChatService/RemoveChatRequest", ReplyAction="http://tempuri.org/IChatService/RemoveChatRequestResponse")]
        System.IAsyncResult BeginRemoveChatRequest(int requestId, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveChatRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChatService/HasNewMessage", ReplyAction="http://tempuri.org/IChatService/HasNewMessageResponse")]
        System.IAsyncResult BeginHasNewMessage(string channelId, long lastId, System.AsyncCallback callback, object asyncState);
        
        bool EndHasNewMessage(System.IAsyncResult result);
    }
    
    public interface IChatServiceChannel : LiveChatStarterKit.VisitorChat.ChatService.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class RequestChatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequestChatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GetMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.ChatService.MessageEntity> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.ChatService.MessageEntity>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class HasNewMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public HasNewMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class ChatServiceClient : System.ServiceModel.ClientBase<LiveChatStarterKit.VisitorChat.ChatService.IChatService>, LiveChatStarterKit.VisitorChat.ChatService.IChatService {
        
        private BeginOperationDelegate onBeginRequestChatDelegate;
        
        private EndOperationDelegate onEndRequestChatDelegate;
        
        private System.Threading.SendOrPostCallback onRequestChatCompletedDelegate;
        
        private BeginOperationDelegate onBeginWriteMessageDelegate;
        
        private EndOperationDelegate onEndWriteMessageDelegate;
        
        private System.Threading.SendOrPostCallback onWriteMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMessagesDelegate;
        
        private EndOperationDelegate onEndGetMessagesDelegate;
        
        private System.Threading.SendOrPostCallback onGetMessagesCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveChatRequestDelegate;
        
        private EndOperationDelegate onEndRemoveChatRequestDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveChatRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginHasNewMessageDelegate;
        
        private EndOperationDelegate onEndHasNewMessageDelegate;
        
        private System.Threading.SendOrPostCallback onHasNewMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ChatServiceClient() {
        }
        
        public ChatServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChatServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<RequestChatCompletedEventArgs> RequestChatCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> WriteMessageCompleted;
        
        public event System.EventHandler<GetMessagesCompletedEventArgs> GetMessagesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveChatRequestCompleted;
        
        public event System.EventHandler<HasNewMessageCompletedEventArgs> HasNewMessageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.ChatService.IChatService.BeginRequestChat(LiveChatStarterKit.VisitorChat.ChatService.ChatRequestEntity request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestChat(request, callback, asyncState);
        }
        
        string LiveChatStarterKit.VisitorChat.ChatService.IChatService.EndRequestChat(System.IAsyncResult result) {
            return base.Channel.EndRequestChat(result);
        }
        
        private System.IAsyncResult OnBeginRequestChat(object[] inValues, System.AsyncCallback callback, object asyncState) {
            LiveChatStarterKit.VisitorChat.ChatService.ChatRequestEntity request = ((LiveChatStarterKit.VisitorChat.ChatService.ChatRequestEntity)(inValues[0]));
            return ((LiveChatStarterKit.VisitorChat.ChatService.IChatService)(this)).BeginRequestChat(request, callback, asyncState);
        }
        
        private object[] OnEndRequestChat(System.IAsyncResult result) {
            string retVal = ((LiveChatStarterKit.VisitorChat.ChatService.IChatService)(this)).EndRequestChat(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequestChatCompleted(object state) {
            if ((this.RequestChatCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestChatCompleted(this, new RequestChatCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestChatAsync(LiveChatStarterKit.VisitorChat.ChatService.ChatRequestEntity request) {
            this.RequestChatAsync(request, null);
        }
        
        public void RequestChatAsync(LiveChatStarterKit.VisitorChat.ChatService.ChatRequestEntity request, object userState) {
            if ((this.onBeginRequestChatDelegate == null)) {
                this.onBeginRequestChatDelegate = new BeginOperationDelegate(this.OnBeginRequestChat);
            }
            if ((this.onEndRequestChatDelegate == null)) {
                this.onEndRequestChatDelegate = new EndOperationDelegate(this.OnEndRequestChat);
            }
            if ((this.onRequestChatCompletedDelegate == null)) {
                this.onRequestChatCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestChatCompleted);
            }
            base.InvokeAsync(this.onBeginRequestChatDelegate, new object[] {
                        request}, this.onEndRequestChatDelegate, this.onRequestChatCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.ChatService.IChatService.BeginWriteMessage(LiveChatStarterKit.VisitorChat.ChatService.MessageEntity msg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWriteMessage(msg, callback, asyncState);
        }
        
        void LiveChatStarterKit.VisitorChat.ChatService.IChatService.EndWriteMessage(System.IAsyncResult result) {
            base.Channel.EndWriteMessage(result);
        }
        
        private System.IAsyncResult OnBeginWriteMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            LiveChatStarterKit.VisitorChat.ChatService.MessageEntity msg = ((LiveChatStarterKit.VisitorChat.ChatService.MessageEntity)(inValues[0]));
            return ((LiveChatStarterKit.VisitorChat.ChatService.IChatService)(this)).BeginWriteMessage(msg, callback, asyncState);
        }
        
        private object[] OnEndWriteMessage(System.IAsyncResult result) {
            ((LiveChatStarterKit.VisitorChat.ChatService.IChatService)(this)).EndWriteMessage(result);
            return null;
        }
        
        private void OnWriteMessageCompleted(object state) {
            if ((this.WriteMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WriteMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WriteMessageAsync(LiveChatStarterKit.VisitorChat.ChatService.MessageEntity msg) {
            this.WriteMessageAsync(msg, null);
        }
        
        public void WriteMessageAsync(LiveChatStarterKit.VisitorChat.ChatService.MessageEntity msg, object userState) {
            if ((this.onBeginWriteMessageDelegate == null)) {
                this.onBeginWriteMessageDelegate = new BeginOperationDelegate(this.OnBeginWriteMessage);
            }
            if ((this.onEndWriteMessageDelegate == null)) {
                this.onEndWriteMessageDelegate = new EndOperationDelegate(this.OnEndWriteMessage);
            }
            if ((this.onWriteMessageCompletedDelegate == null)) {
                this.onWriteMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWriteMessageCompleted);
            }
            base.InvokeAsync(this.onBeginWriteMessageDelegate, new object[] {
                        msg}, this.onEndWriteMessageDelegate, this.onWriteMessageCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.ChatService.IChatService.BeginGetMessages(string channelId, long lastId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMessages(channelId, lastId, callback, asyncState);
        }
        
        System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.ChatService.MessageEntity> LiveChatStarterKit.VisitorChat.ChatService.IChatService.EndGetMessages(System.IAsyncResult result) {
            return base.Channel.EndGetMessages(result);
        }
        
        private System.IAsyncResult OnBeginGetMessages(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string channelId = ((string)(inValues[0]));
            long lastId = ((long)(inValues[1]));
            return ((LiveChatStarterKit.VisitorChat.ChatService.IChatService)(this)).BeginGetMessages(channelId, lastId, callback, asyncState);
        }
        
        private object[] OnEndGetMessages(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.ChatService.MessageEntity> retVal = ((LiveChatStarterKit.VisitorChat.ChatService.IChatService)(this)).EndGetMessages(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMessagesCompleted(object state) {
            if ((this.GetMessagesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMessagesCompleted(this, new GetMessagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMessagesAsync(string channelId, long lastId) {
            this.GetMessagesAsync(channelId, lastId, null);
        }
        
        public void GetMessagesAsync(string channelId, long lastId, object userState) {
            if ((this.onBeginGetMessagesDelegate == null)) {
                this.onBeginGetMessagesDelegate = new BeginOperationDelegate(this.OnBeginGetMessages);
            }
            if ((this.onEndGetMessagesDelegate == null)) {
                this.onEndGetMessagesDelegate = new EndOperationDelegate(this.OnEndGetMessages);
            }
            if ((this.onGetMessagesCompletedDelegate == null)) {
                this.onGetMessagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMessagesCompleted);
            }
            base.InvokeAsync(this.onBeginGetMessagesDelegate, new object[] {
                        channelId,
                        lastId}, this.onEndGetMessagesDelegate, this.onGetMessagesCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.ChatService.IChatService.BeginRemoveChatRequest(int requestId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveChatRequest(requestId, callback, asyncState);
        }
        
        void LiveChatStarterKit.VisitorChat.ChatService.IChatService.EndRemoveChatRequest(System.IAsyncResult result) {
            base.Channel.EndRemoveChatRequest(result);
        }
        
        private System.IAsyncResult OnBeginRemoveChatRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int requestId = ((int)(inValues[0]));
            return ((LiveChatStarterKit.VisitorChat.ChatService.IChatService)(this)).BeginRemoveChatRequest(requestId, callback, asyncState);
        }
        
        private object[] OnEndRemoveChatRequest(System.IAsyncResult result) {
            ((LiveChatStarterKit.VisitorChat.ChatService.IChatService)(this)).EndRemoveChatRequest(result);
            return null;
        }
        
        private void OnRemoveChatRequestCompleted(object state) {
            if ((this.RemoveChatRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveChatRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveChatRequestAsync(int requestId) {
            this.RemoveChatRequestAsync(requestId, null);
        }
        
        public void RemoveChatRequestAsync(int requestId, object userState) {
            if ((this.onBeginRemoveChatRequestDelegate == null)) {
                this.onBeginRemoveChatRequestDelegate = new BeginOperationDelegate(this.OnBeginRemoveChatRequest);
            }
            if ((this.onEndRemoveChatRequestDelegate == null)) {
                this.onEndRemoveChatRequestDelegate = new EndOperationDelegate(this.OnEndRemoveChatRequest);
            }
            if ((this.onRemoveChatRequestCompletedDelegate == null)) {
                this.onRemoveChatRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveChatRequestCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveChatRequestDelegate, new object[] {
                        requestId}, this.onEndRemoveChatRequestDelegate, this.onRemoveChatRequestCompletedDelegate, userState);
        }
        
        System.IAsyncResult LiveChatStarterKit.VisitorChat.ChatService.IChatService.BeginHasNewMessage(string channelId, long lastId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHasNewMessage(channelId, lastId, callback, asyncState);
        }
        
        bool LiveChatStarterKit.VisitorChat.ChatService.IChatService.EndHasNewMessage(System.IAsyncResult result) {
            return base.Channel.EndHasNewMessage(result);
        }
        
        private System.IAsyncResult OnBeginHasNewMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string channelId = ((string)(inValues[0]));
            long lastId = ((long)(inValues[1]));
            return ((LiveChatStarterKit.VisitorChat.ChatService.IChatService)(this)).BeginHasNewMessage(channelId, lastId, callback, asyncState);
        }
        
        private object[] OnEndHasNewMessage(System.IAsyncResult result) {
            bool retVal = ((LiveChatStarterKit.VisitorChat.ChatService.IChatService)(this)).EndHasNewMessage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnHasNewMessageCompleted(object state) {
            if ((this.HasNewMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.HasNewMessageCompleted(this, new HasNewMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void HasNewMessageAsync(string channelId, long lastId) {
            this.HasNewMessageAsync(channelId, lastId, null);
        }
        
        public void HasNewMessageAsync(string channelId, long lastId, object userState) {
            if ((this.onBeginHasNewMessageDelegate == null)) {
                this.onBeginHasNewMessageDelegate = new BeginOperationDelegate(this.OnBeginHasNewMessage);
            }
            if ((this.onEndHasNewMessageDelegate == null)) {
                this.onEndHasNewMessageDelegate = new EndOperationDelegate(this.OnEndHasNewMessage);
            }
            if ((this.onHasNewMessageCompletedDelegate == null)) {
                this.onHasNewMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHasNewMessageCompleted);
            }
            base.InvokeAsync(this.onBeginHasNewMessageDelegate, new object[] {
                        channelId,
                        lastId}, this.onEndHasNewMessageDelegate, this.onHasNewMessageCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override LiveChatStarterKit.VisitorChat.ChatService.IChatService CreateChannel() {
            return new ChatServiceClientChannel(this);
        }
        
        private class ChatServiceClientChannel : ChannelBase<LiveChatStarterKit.VisitorChat.ChatService.IChatService>, LiveChatStarterKit.VisitorChat.ChatService.IChatService {
            
            public ChatServiceClientChannel(System.ServiceModel.ClientBase<LiveChatStarterKit.VisitorChat.ChatService.IChatService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRequestChat(LiveChatStarterKit.VisitorChat.ChatService.ChatRequestEntity request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("RequestChat", _args, callback, asyncState);
                return _result;
            }
            
            public string EndRequestChat(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("RequestChat", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginWriteMessage(LiveChatStarterKit.VisitorChat.ChatService.MessageEntity msg, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = msg;
                System.IAsyncResult _result = base.BeginInvoke("WriteMessage", _args, callback, asyncState);
                return _result;
            }
            
            public void EndWriteMessage(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("WriteMessage", _args, result);
            }
            
            public System.IAsyncResult BeginGetMessages(string channelId, long lastId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = channelId;
                _args[1] = lastId;
                System.IAsyncResult _result = base.BeginInvoke("GetMessages", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.ChatService.MessageEntity> EndGetMessages(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.ChatService.MessageEntity> _result = ((System.Collections.ObjectModel.ObservableCollection<LiveChatStarterKit.VisitorChat.ChatService.MessageEntity>)(base.EndInvoke("GetMessages", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveChatRequest(int requestId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = requestId;
                System.IAsyncResult _result = base.BeginInvoke("RemoveChatRequest", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveChatRequest(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveChatRequest", _args, result);
            }
            
            public System.IAsyncResult BeginHasNewMessage(string channelId, long lastId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = channelId;
                _args[1] = lastId;
                System.IAsyncResult _result = base.BeginInvoke("HasNewMessage", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndHasNewMessage(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("HasNewMessage", _args, result)));
                return _result;
            }
        }
    }
}
